PyPI.com                               Python eklentilerinin aratıldığı site.
Tuple                                  Tek seferlik veri depolamak için kullanılır. Yeniden tanımlamak zorunluluktur. Değiştirilemez. Parantez kullanılır.
Set                                    Küme oluşturulmasına yarar. Sıralanamaz, küme içerisinde var mı yok mu onu gösterir.Birleştirme(union),kesişim(intersection) ve fark(difference) gibi matematiksel işlemleri için kullanılır. Süslü parantez kullanılır.
.py                                    New file(yeni açılan dosyaları) python ile çalıştırmamızı sağlayan eklenti.
\n                                     sonraki yazı için alt satıra geçer. (print("ali\n") şeklinde kullanılır.)
Ctrl+C                                 Komutu while döngüsünü sonlandırır.
While(True)                            Komutu sonsuz döngüye sokar.
If/Elif/Else                           Koşul komutu.
**                                     Karesini alma.
//                                     Kesirsiz bölme.(50/9=5)
/                                      Kesitli bölme.(50/9=5.55)
+                                      Toplama.
-                                      Çıkartma.
*                                      Çarpma.
4boşluk/1tab                           Komut dizinini içine aktarma.
break                                  While(True) döngüsünü sonlandırma.
input("Değer giriniz.")                İçerisine argüman yazmak için kullanılır.
#                                      Açıklama metni.
int(Integar)                           Tam sayıları ifade ettiğimiz class.
str(String)                            Metinler(ahmet, 5, sekiz) için kullanılan class.
bool                                   True/False değerleri göstermek için kullanılan class.
float                                  Kesirli sayılar için kullanılan class.
complex                                Karmaşık sayıları ifade etmek için kullanılır.
pip install                            PyPI kütüphanesinden eklenti indirme.
range()                                Kaç kez tekrar edileceğini ifade etmek için kullanılır.
random.randint(a,b)                    a ila b arasında random bir sayı verir.
random.choice(a)                       a'da mevcut ifadelerden birini rastgele seçer.(a = "helloworld" sonuç=w gibi. sonuç sürekli değişkendir.)
and                                    Mantık(ve) komutu.
or                                     Mantık(veya) komutu.
docs.python.org                        Pyhton komut kütüphanesi. 
app.diagrams.net                       Diyagram oluşturmak için kullanılan bir site.
x.real                                 Gerçel değeri gösterir.
math.gcd                               En büyük ortak böleni        
python .\ebob.py                       Cmd üzerinden Ebob uygulamasını python ile açma komutu.
print("{}gider{}'ye".format(a,b))      {} içerisine verdiğimiz değerleri ya da metinlerin gösterilmesini sağlar.(a gider b'ye)
------------------------my_string-------------------------(9.String.kullanımı)
length=len(my_string)                  Dizinin uzunluğunu ölçmek için kullanılan bir komut.
print(lenght)                          Dizinin uzunluğunu gösteren komut.
first_char = my_string[0]              Dizinin ilk harfi.
last_char = my_string[-1]              Dizinin son harfi.
substring = my_string[0:5]             İlk beş harfi.
concatenated_str = str1 + " " + str2   İki stringi birleştirir.
my_string.strip                        İlk ve sondaki boşlukları kaldırır.
my_string.lower                        Bütün karakterleri küçük yazar.
my_string.upper                        Bütün karakterleri büyük yazar. 
my_string.replace("b","a")             b yerine a yazılır.
print(my_string[::-1])                 my_string dizisinin içindeki metni tersten göstermesini sağlayan komut dizimi.
[::-1]                                 [başlangıç,durma,adım sayısı]
.split(',')
-------------------------List-------------------------------(10.List kullanımı)
List = [1,2,3]                         Birden fazla veri ve nesne barındırabilir.
List = ["Muz","Armut]                  Metinlere tırnak eklenir.
List.append(4)                         Listeye bir şey eklemek için kullanılır. Listenin sonuna ekler.    
List[1] =  5                           İlk nesneyi değiştirir.(1'i 5 yapar.)
List["Muz"] = "Karpuz"                 İlk nesneyi değiştirir.(Muz'u Karpuz yapar.)
List.remove(1)                         Listedeki ilk nesneyi siler.
List = List2                           List ve List2 aynı adreste olacağından dolayı yapılan herhangi bir değişiklik ikisini de etkilemektedir.
List = List2.copy()                    List ve List2 farklı adreste olacağından dolayı yapılan değişiklikte birbirlerinden etkilenmeyecektir.
print(id(List))                        id komutu ile Liste'nin bulunduğu konumu gösterir.
List[-1] = 1                           Listenin sonuncu nesnesini değiştirir.(3'ü 1 yapar.)
List[2:4] = [6,7]                      İkinci ve dördünücü nesneyi değiştir.(2'yi 6, 4'ü 7 yapar.)
konum = List.index("Muz")              Bir ögenin konumunu bulma.(Muz 1.konumdadır.)
for meyve in List:                     Listenin içindekileri sıralar.
List.sort()                            Ögeleri sıralar.(1,2,3 ya da Alfabeye göre)
List.reverse()                         Listenin içerisindekilerin sıralamasını tersten yazıyor.
------------------------ Dictionary------------------------(11.Dictionary kullanımı)
öğrenci = {"ad":"Batuhan","yas" :25}   Eşli şekilde sınıflandırmak için kullanılır.
print(öğrenci["ad"])                   Bir ögenin değerini almak kullanılır. (Batuhan)
öğrenci["yas"] = 24                    Bir ögeyi değiştirmek için kullanılır.(25'i 24 yaptık)
öğrenci["bolum"] = "Mühendis"          Bir öge eklemek için kullanılır.
del öğrenci["ad"]                      Bir öge silmek için kullanılır.
{key:10} :                             : ' ya kadar olan boşluğu belirtir.(10 boşlık sayısı.)
print("f{value:.2f}")                  Rakamları gösterir.(printin için f koymak zorundasın.)                 
-------------------------my_tuple--------------------------(12.Tuple kullanımı)
print(my_tuple[0])                     Erişme için kullanılır. 1'i yazdırır.([4]'üçüncüyü yazdırır.) 0 başlangıçtır.
print(my_tuple[1:3])                   Dilimleme için kullanılır 2. ve 3. yü yazdırır. (2,3)
my_tuple = my_tuple3 + my_tuple2       İki tuple'ı birleştirmek için kullanılır.
print(len(my_tuple))                   Tuple uzunluğunu bulur. İçindeki tüm ögeleri sayar.
sorted_tuple = sorted(my_tuple3)       İçindekileri sıralar.
print(my_tuple3.count(3))              kaç tane 3 olduğunu yazdırır. 3.sırayı değil.

for element in my_tuple                Tuple'ı döngü kullanarak yazdırır.
    print(elemet)

print("Adı:", oyuncu[0])               Tuple'da bulunan ilk ögeyi çektik ve Adı: ile eşledik.(Adı:Batuhan)
--------------------------my_set-------------------------------(13.Set kullanımı)
my_set.add(6)                          Set'in içine 6'yı ekler.
my_set.remove(5)                       Set'in içinden 5'i siler.
my_set = set1.union(set2)              İki seti birleştirir.(set1+set2)
my_set = set1.intersection(set2)       İki seti kesiştirir. Ortak nesneleri alır.
my_set = set1.difference(set2)         İki seti bölger.Ortak olmayan nesneleri alır.
lenght = len(my_set)                   Setin uzunluğunu hesaplama. 
    print(length)

for element in my_set                  Setin elemanlarını for düngüsü kullarak işleme.
    print(elemet)

my_set.intersection_update(set2)       Setin üzerine gelen set2 ile ortak değerleri alır.(Her güncellemede ortak değeri alır.) 
set3=my_set.symmetric_difference(set2) İki set üzerindeki ortak olmayan nesneleri alır ve yeni set oluştur.
my_set.symmetric_difference(set2)      İki set üzerindeki ortak olmayan nesnelerş alır ve ilk setin üzerine oluşturur.
print(my_set.issubset(set2))           Kümenin kapsayıp kapsamadığını gösterir.(True)(set2, my_set'i kapsıyor), set2'nin alt kümesi my_set
print(set2.issuperset(my_set))         Kümenin kapsayıp kapsamadığını gösterir.(True)(set2, my_set'i kapsıyor), my_set'in üst kümesi set2
print(my_set.issuperset(set2))         Kümenin kapsayıp kapsamadığını gösterir.(False)(set2, my_set'i kapsamıyor)
issubset(alt küme)/issuperset(üst küme)
f_set = frozenset(my_set)              Setlerin değiştirilmesini engeller. İçindeki elemanlar değiştirilemez. (f_set.add(3) komutu girilirse hata verir. Eklenemez.)
------------------------------Koşul-------------------------------(14.Kosullu_ifadeler)
if/elif/else                           Koşul ifadeleri için kullanılır.(Else hiçbir koşul sağlanmıyorsa çalışır.)
sonuc = "Doğru" if koşul else "Yanlış" (Ternary)Koşullu ifadeleri tek satırda kullanmak için kullanılan komut.

if koşul :                             İç içe if koşulu kullanılabilir.
    if koşul2:                         İlk koşul sağlanırsa içindeki koşul'a bakılır.

if koşul :                             İf koşulundan sonra : ifadesi kullanılır.   
------------------------------For---------------------------------(15.For)
for i in range(2,8):                   2'den'8 e kadar olan sayılar.
for i in range(0,10,2):                0'dan 10'a kadar olan sayıları 2şer atlayarak sayar.
for i in range(start,stop,step):       Başlangıç,bitiş ve adım sayılarının yazılacağı komut. Stop kısmı dahil edilmez.
for i in range():                      Dongu ifdaelerinden sonra : ifadesi kullanılır.

for i, a in enumerate(List,start=3):   List elemanlarının başına sayı ekler ve listenin ilk elemanın sayısı 3'ten başlar.
    print(i,a)

for i in zip(List,List2):              2 List elemanlarını birleştirmeye yarar.
    print(i)

sozluk = dict(zip(isimler,yaslar))     Listeleri dict komutu ile Dictionary olarak birleştirir.
print(sozluk)

for i range(0,10)
    if sayi==5:
        break                          Döngüyü 5'te durdurur ve 5 dahil edilmez.
for i range(0,10)
    if sayi ==5:
        continue                       Döngüyü 5'te durdurur ve 5 dahil edilmez, devam eder.
------------------------------While-------------------------------(16.While)
while koşul :                          Koşul sağlandığı sürece işlem devam edecektir.
while True:                            Koşul sonsuz döngüde devam eder.
while koşul :                          While koşullu ifadelerde : kullanılır.
i +=1                                  i sayısına her döngü sonrası 1 ekler.
------------------------------Fonksiyon---------------------------(17.Fonksiyon)
def ......                             def komutu kullanarak fonksiyon oluşturulur.

def fonksiyon_adi(parametreler):       Fonksiyon işlemleri. Fonksiyona dışarıdan erişilemez.
    return deger

def fonksiyon_adi(parametreler):       Fonksiyonlarda : kullanılır.

def input(x,y):                        İnput şeklinde kullanılabilir. 

def fonksiyon_adi():                   İç içe fonksiyon oluşturulabilir. Fonksiyon içerisindeki değerler fonksiyona özeldir.
    print()
    def fonksiyon_adi2():
        print()
    fonksiyon_adi2()

global degisken                        Fonksiyon dışı ve içinde tanımlama için kullanılan değişken.
yerel degisken                         Fonksiyon içinde tanımlamak için kullanılam değişken.

def böl(x,y):                       
    try:                               Fonksiyonun hata vererek kapatılmasını engelleme komutu.
        return x/y                                                  
    except:                            Fonksiyonun vereceği herhangi bir hatada çökmeyecek ve alttaki ifadeyi terminale yansıtacak.
        print("\n Hata var")           5/0 yapıldığında terminalde Hata var yazar ve kod kapanmadan devam eder.
------------------------------Modüller---------------------------(18.Modüller)
Modül ile kütüphane farkı; Modüller daha çok tek bir işi gerçekleştirmeye yararken, kütüphane ise birden fazla modül barındıran bir sistemdir.
"os" modülü(İşletim sistemi modülü)    İşletim sistemi ile ilgili işlemler yapar. İşletim bilgilerine erişim sağlar. Her sistemde çalışır.
"os"                                   Dizin işlemleri,dosya işlemleri gibi okuma/yazma/silme/listeleme/dizin silme gibi işlemler gerçekleştirir.
"os"                                   İşletim sistemi adı/kullanıcı adı gibi işlemlere erişim sağlar.

import os
os.mkdir("yenidizin")                  Yeni bir dizin oluşturma
print(os.listdir("."))                 Dizin içeriğini listeleme 
os.rename("yenidizin","yenidizinadı")  Dizin adı değiştirme
os.rmdir("yenidizinadı")               Dizin silme
os.listdir("yenidizin")                Dizin listeler.

try:                                   Dosya oluştururken hata almamak için kullanılan komut.
    os.mkdir("veriler")               
except FileExistsError:                Hata kaynaklanınca kapanmasını engellemek için kullanıldı.
    print("Halen varolan bir dosya oluşturulamaz:")

os.mkdir(os.path.expanduser("~")+"/t") Bilgisayarın dizin komutunda t adlı dosya oluşturur.(C:\Users\Public\t)

----open()----

f= open("dosya_adı","modu")            Dosya okuma ve yazma işlemleri için kullanılan fonksiyon.
print(f.read())                        Dosyayı listeler.


open("dosya_adı","r")                  Dosyayı okumak mümkündür,yazı yazılamaz.
open("dosya_adı","w")                  Dosyayı okumak ve yazı yazmak mümkündür. Dosya yoksa oluşturur, varsa üzerine yazar.
open("dosya_adı","x")                  Belirtilen dosyayı oluşturur, dosya varsa bir hata döndürür.
open("dosya_adı","a")                  Eklemek için dosya açar, yoksa oluşturur. Dosya varsa sonuna ekler.
open("dosya_adı","t")                  Default value, yazı modu.
open("dosya_adı","b")                  Binary mode(örnek olarak resimler.)

----with open()---

with open("dosya_adı","r") as f:       Dosyayı with ile okume işlemi.
    print(f.read())

with open("dosya_adı","w") as f:       Dosyayı with ile yazma işlemi.
    print(f.write())

os.remove("dosya_adı.txt")             Dosya silme.
os.rename("dosya_adı.txt","yeni_dosya_adı.txt")Dosya adı değiştirme.

----işletim sistemine erişme----
posix(Lunix işletim sistemi)
nt(Microsoft işletim sistemi)

print(os.name)                         İşletim sistemi adı öğrenme.(nt)
print(os.getlogin())                   Kullanıcı adını bulma.(batu_)
print(os.path.expanduser("~"))         Ana dizi yolunu bulur.(C:\Users\batu_)

Terminalde sırasıyla;
python
import os
print(os.name)

----math()----

import math

math.sqrt()                            Karekökünü hesaplar
math.pow()                             Üssünü alma
math.ceil()                            Sayıyı üst kısma yuvarlar(33.03=34)
math.lgamma()                          Bu fonksiyon daha önce öğrendiğimiz iki fonksiyonu birleştiriyor.
math.atanh()                           Verilen hiperbolik tanjant değerinin tersini döndürür.
math.copysign()                        Aldığı iki parametreden ikincisinin işaretini birincisine verir.
math.fabs()                            Verilen değerin mutlak değerini alır.
math.factorial()                       Verilen sayının faktoriyelini döndürüyor. Eğer verilen değer pozitif tam sayı değilse ValueError hatası veriyor.
math.floor()                           ceil fonksiyonunun tam tersi bir işleve sahip. Verilen ondalıklı sayıyının bir altındaki tam sayıyı döndürür.
math.fmod()                            Verdiğiniz birinci parametrenin ikinci parametreye bölümünden kalanı buluyor. % operatöründen farkı negatif sayılarda ortaya çıkıyor.
math.frexp()                           Bu fonksiyon x bilindiğinde aşağıdaki denklemin m ve e parametrelerini bulmaya yarıyor. m değerinin mutlak değeri 0,5 ve 1 arasında bir değer alıyor.
math.gcd()                             Verilen iki sayının EBOB’unu veriyor.
math.trunc()                           int fonksiyonu ile aynı işi yapıyor.
math.e                                 euler sabitini tutan bir değişken. Değeri: 2.718281…
math.pi                                pi sayısını tutan değişken. Değeri: 3.141592….
math.tau                               tau sabitini tutan değişken. Değeri pi sayısının iki katı.
math.exp()                             euler sabitinin kuvvetini alır. Yani yaptığı iş şudur:math.e ** x
math.expm1()                           math.exp fonksiyonunun yaptığı işten tek farkı sonuçtan 1 çıkarmasıdır
math.log()                             Birinci değerin ikinci değere göre logaritmasını hesaplar.
math.log1p()                           Verilen sayının bir fazlasının e tabanına göre logaritmasını hesaplar.
math.log2()                            Verilen sayının 2 tabanında logaritmasını hesaplar.
math.log10()                           Verilen sayının 10 tabanında logaritmasını hesaplar.
math.degrees()                         Verilen sayıyı radyandan dereceye çevirir.
math.radians()                         Verilen sayıyı dereceden radyana çevirir.
math.sin()                             Radyan cinsinden verilen sayının sinüsünü hesaplar.
math.cos()                             Radyan cinsinden verilen sayının cosünüsünü hesaplar.
math.tan()                             Radyan cinsinden verilen sayının tanjantını hesaplar.
math.cot()                             Radyan cinsinden verilen sayının cotanjatını hesaplar.
math.asin()                            Verilen sinüs değerinden radyan cinsinde bir açı döndürür.
math.acos()                            Verilen kosinüs değerinden radyan cinsinde bir açı döndürür.
math.atan()                            Verilen tanjant değerinden radyan cinsinde bir açı döndürür.
math.atan2()                           İlk değere y ikinci değere x dersek şu işlemin sonucunu döndürür: atan(y/x)
math.hypot()                           İlk değere x ikinci değere y dersek şu işlemin sonucunu döndürür: sqrt(x*x+y*y).
math.cosh()                            Verilen değerin hiperbolik kosinüsünü döndürür.
math.sinh()                            Verilen değerin hiperbolik sinüsünü döndürür.
math.tanh()                            Verilen değerin hiperbolik tanjantını döndürür.
math.acosh()                           Verilen hiperbolik kosinüs değerinin tersini döndürür.
math.asinh()                           Verilen hiperbolik sinüs değerinin tersini döndürür.
math.atanh()                           Verilen hiperbolik tanjant değerinin tersini döndürür.
math.gamma()                           Bu fonksiyon factorial fonksiyonuna çok benziyor. Farklarından biri verilen sayının bir azının faktoriyelini hesaplamasıdır. Ancak asıl fark sayı büyüdüğünde ortaya çıkıyor.
math.lgamma()                          Bu fonksiyon daha önce öğrendiğimiz iki fonksiyonu birleştiriyor.

----datetime----

import datetime

datetime.date.now()                    Şuanki tarih.
datetime.date()                        Belirtilen tarih.
datetime.time()                        Belirtilen zaman.
datetime.datetime()                    Belirtilen tarih ve zaman.
datetime.today()                       Bu fonksiyon now() ile aynı içeriğe ve işleve sahiptir

bugün = datetime.datetime.today()

bugün.years
bugün.months
bugün.days
bugün.hours
bugün.minutes
bugün.seconds
bugün.microseconds
bugün.total_seconds()                  Toplamını saniyeye çeviri. 

an = datetime.datetime.now()
datetime.datetime.ctime(an)            Fonksiyonu, içinde bulunduğumuz ana ilişkin tarih ve zaman bilgilerini içeren okunaklı bir karakter dizisi verir.

datetime.datetime.strftime(an "%y")
%a                                     hafta gününün kısaltılmış adı
%A                                     hafta gününün tam adı
%b                                     ayın kısaltılmış adı
%B                                     ayın tam adı
%c                                     tam tarih, saat ve zaman bilgisi
%d                                     sayı değerli bir karakter dizisi olarak gün
%j                                     belli bir tarihin, yılın kaçıncı gününe denk geldiğini gösteren 1-366 arası bir sayı
%m                                     sayı değerli bir karakter dizisi olarak ay
%U                                     belli bir tarihin yılın kaçıncı haftasına geldiğini gösteren 0-53 arası bir sayı
%y                                     yılın son iki rakamı
%Y                                     yılın dört haneli tam hali
%x                                     tam tarih bilgisi
%X                                     tam saat bilgisi
%H                                     saat
%M                                     dakika
%S                                     Saniye
----locale----
import locale                          Zaman dilini bulunduğun yer egöre ayarlar.
locale.setlocale(locale.LC_ALL, '')    Zaman dilimini Türkçe ayarlar.
locale.setlocale(locale.LC_ALL,'italian')Zaman dilimini italyanca ayarlar.

------------------------------JSON--------------------------------(19.JSON)

import json

json veri depolamak,taşımak veya paylaşmak için kullanılan veri biçimidir.İnsanlar ve makineler tarafından kolayca okunur.
json, anahtar-değer çiftleri kullanarak verileri organize eder.
json herhangi bir programlama dilinde kullanılabilir. json verileri, metin dosyalarında depolanabilir ve web uygulamalarında, API'lerde ve veritabanlarında kullanılabilir.
json modülü, python'da JSON(JavaScript Object Notatiom) veri biçimini işlemek için kullanılan standart bir kütüphanedir. Verileri okunaklı ve taşınabilir bir biçimde depolar.
json modülü, JSON verilerini Python sözcüklerine veya nesnelerine dönüştürmek ve aynı şekilde Python nesnelerii JSON verilerine dönüştürmek için kullanılır.

json.load()                            JSON biçimimdeki bir dosyayı okuyup, Python nesnelerine dönüştürür.
json.dump()                            Python nesnelerini JSON biçimindeki bir dosyaya yazar.
------------------------------CSV---------------------------------(20.CSV)

import csv

csv modülü, Python'da CSV(comma-separated values) formatındaki dosyalarla çalıştırmak için kullanılan bir standart kütüphanedir.
CSV, verileri virgülle ayrılmış bir şekilde tutan ve ssütunları birbirinden ayıran bir dosya formatıdır.

csv.reader():                          CSV dosyasını okumak için kullanılır. Bu işlev, CSV dosyasını okur ve her bir satırı bir liste olarak döndürür.
csv.writer():                          CSV dosyasına yazmak için kullanılırç Bu işlev, verilen liste ve tuple'ları CSV dosyasına yazar.
csv.DictReader():                      CSV dosyasını okumak için kullanılır. Bu işlev, her bir satırı bir sözlük olarak döndürür ve sütun adlarını anahtar olarak kullanır.
csv.DictWriter():                      CSV dosyasını yazmak için kullanılır. Bu işlev, verilen sözlükleri CSV dosyasına yazar ve sütun adlarını anahtar olarak kullanır.
------------------------------Class---------------------------------(22.Class)
Abstraction(Soyutlama)                 Tek Class içindeki __init__ soyutlar ve erişim engeller. Class abc:
Inheritance(Miras alma)                Başka bir class içinde başka class'ı kullanma.   Class abd(dbe):
Polymorphism(Çok biçimlilik)           Daha fazla class'ın farklı özelliklere sahip olması.
Encapsulation(Kapsülleme)              __ kullanılır ve kapsülleme ile erişim tamamen engellenir. Erişim açılması için fonksiyon kullanılır.

class abc:                             Sınıf ismini oluşturmaya yarar.
    def __init__(self, a,b,c):         Dışarıdan erişilemez.
        self.a = a                     a'yı tanıtmaya yarar.
        self.b = b                     b'yi tanıtmaya yarar.
        self.c = c                     c'yi tanıtmaya yarar.
abc1 = ("a","b","c")                   class içinde değiştirilemez bilgilere isim verir.

self.x = []                            Eğer liste dışarıda olursa a'ya eklenen tüm bilgiler b ve c'ye de eklenecektir.
class abc :
    def add_x(self,x):
        self.x.append(x)

class abc:
    name = "ifade"                      Eğer name sabit ise class'ın altına yazılır ve tüm ifadelede sabit kullanılır.

class abc:
self.x = []                            Eğer liste içeride olursa a'ya eklenen tüm bilgiler b ve c'ye dahil edilmeyecektir.
    def add_x(self,x):
        self.x.append(x)


class dfe(abc):                        class abd'De verilen bilgilere erişim sağlar bir nevi miras alır.
    def __init__(self, d,f,e):
        super().__init__(a,b,c)        Bir üst sınıfın nitelik ve metotları üzerinde değişiklik yaparken, mevcut özellikleri de muhafaza edebilmemizi sağlar.
        self.g = g                     

super()                                Üst sınıfa erişim sağlar.

self.__ad _ ad                         Erişimi kısıtlar. Erişim için fonksiyon oluşturulması gerekir.

def ad_erisim(self):                   Dışarıdan erişilmesi için gerekli olan komut dizimidir.
    return self.__exam1
--------------------------Class-Special--------------------------(23.Class_Special_methods)
__class__                              Hangi classtan üretildiği gösterilir.
__doc__                                Üç tırnak ile yazılan çok satırlı yorumları gösterir.("""selam""" gibi.)
__del__                                Veri silmesine yarar.(k1.__del__(ad) ismi siler)
__str__                                String olarak çalıştırır.(def __str__ şeklinde kullanılır.)
__ge__                                 <= great equal ifadelerin nasıl davranacağını gösterir.
__getattribute__                       Gözlenmesini sağlar.
__hash__                               Belli bir algoritmaya göre hash'ler. Hash ise belli bir algoritmaya göre şifreleme.
__init_subclass__                      Üst classta olmayan ama alt clasta olmasını istediğimiz şeyler için kullanılır.
__le__                                 >= less equal ifadelerin nasıl davranağını gösterir.
__module__                             Nerede olduğunu gösterir. Bulunduğu yerden çağırırsan(__main__) Eğer import ile çekilirse yani dışarıdan çağırılırsa nerden çekildiğini de gösterir.(örnek olarak 14.Git)
__ne__                                 != not equal ifadelerinin nasıl davranacağını gösterir.
__new__                                __init__'ten önce çalışır. Nasıl bir obje olacağına karar vermek için kullanıp özeleştirilmesine yarar. Dosya bütünlüğünü bozabilir.*
__delattr__                            Veri silmek için kullanılır. Dosya bütünlüğünü bozabilir.*
__repr__                               Terminal üzerinde kullanışlıdır. Kitapçık gibi bilgilendirme işine yarar.
__setattr__                            Ayarlamak için kullanılır. __getattribute__'e göre getirmesi yerine ayarlamasını sağlar
__sizeof__                             Kullanım boyutunu sınıflandırır.
__subclasshook__(cls,sub)
__subclasscheck__(cls,k1)              Alt class olup olmadığını True/False ile döndürür.
__weakref__                            Oluşturulan bir nesneyi. Optimize etmeye yarar ve verilerin şişirilmesini sağlar. eski bilgileri kurtarır ve siler.
------------------------------------------------------------------
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           (Openai key)

------------------------------Git---------------------------------
git config --global user.name Batu     Git yapılandırma.
git config -h                          Komut listesini gösterir.
git config --global user.email          
git config                             Config komutlarını Listeler.
git config --global                    Global config
git config --system                    Sistem config
git config --local                     Local config
git --list                             Listeler.
git add .                              Github'a her şeyi aktarır. Günceller.
git add 8.Ebob.py                      Ebob dosyasını github'a yükler.
git commit -m "degisiklik "            Mesajın kısıltması. İlk Comit ile değişikliği kaydeder.
git branch -M main                     Branch'i main olarak aktarır.
git remote add origin https://github.. Uzak bilgisayara aktarılmasını sağlarız.
git push -u origin main                Dosyayı aktarımını sağlıyor. main dosyaya aktarır.
git push                               Dosya aktarımını sağlayan kısa komut.
git pull origin main                   Github üzerinde main klasöründe yapılan değişikliği indirmesine/çekmesine yarar.
git pull                               Github üzerinde yapılan tüm değişikliği çekmesini sağlayan kısa kodu.
git branch new_branch                  new_branch adında yeni bir branch oluşturur.
git checkout new_branch                Mevcut bir branch'e geçmek için kullanılan komut.
git clone gttps://github.com//pytho..  Github üzerinden dosya indirmeyi sağlar. Sadece maini çeker.
git pull origin new_branch             new_branch dosyasını clone'lar.                   
git merge origin main                  Dosyayı günceller.
git remote -v                          Remote edileceği adresi verir.
git branch -l                          Branchleri listeler.
git checkput main                      Main'e geçmek için kullanılır.
git push -u origin new_branch          Mevcut değişikliği new_branch branch'ine aktarır.
git config --global --unset-all user.name  Kayıtlı tüm isimleri siler.

#Depoyu açarak hangi dosyanın dosyanın değiştirildiği veya eklendiğini gösterir. (Yeni kod yeşil, değiştirilen kod mavi gösterir.).
#git add . yapıldıktan sonra git commit -m "degisiklik" yazılıp güncelleme yapılacaktır.
#Daha sonra git push -u origin main yaparak değiştirilen dosyaları github'a aktarım yapılarak sonlandırılacaktır. Tüm değişiklikler github üzerinden gözlemlenebilecektir.
#Projeler için değişiklikler branch üzerinden yapılmaktadır. 
#Github üzerinden pull request isteğini gönderildiğinde master'a bildirim gelmektedir. Eğer merge kabul edilirse main' e aktarılmaktadır.
#yapılan değişiklik pull ile çekilmektedir. Pull'a çekilen değişiklikler main'e aktarılır.

sırasıyla ;

git add .
git commit -m  "degisiklik"
git push                               Böylece tüm değişikliklerin hepsi github'ta main'e aktarılır.

git pull  

----------------------Terminal Renk Kodları----------------------
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

# Bold
BBlack="\[\033[1;30m\]"       # Black
BRed="\[\033[1;31m\]"         # Red
BGreen="\[\033[1;32m\]"       # Green
BYellow="\[\033[1;33m\]"      # Yellow
BBlue="\[\033[1;34m\]"        # Blue
BPurple="\[\033[1;35m\]"      # Purple
BCyan="\[\033[1;36m\]"        # Cyan
BWhite="\[\033[1;37m\]"       # White

# Underline
UBlack="\[\033[4;30m\]"       # Black
URed="\[\033[4;31m\]"         # Red
UGreen="\[\033[4;32m\]"       # Green
UYellow="\[\033[4;33m\]"      # Yellow
UBlue="\[\033[4;34m\]"        # Blue
UPurple="\[\033[4;35m\]"      # Purple
UCyan="\[\033[4;36m\]"        # Cyan
UWhite="\[\033[4;37m\]"       # White

# Background
On_Black="\[\033[40m\]"       # Black
On_Red="\[\033[41m\]"         # Red
On_Green="\[\033[42m\]"       # Green
On_Yellow="\[\033[43m\]"      # Yellow
On_Blue="\[\033[44m\]"        # Blue
On_Purple="\[\033[45m\]"      # Purple
On_Cyan="\[\033[46m\]"        # Cyan
On_White="\[\033[47m\]"       # White

# High Intensty
IBlack="\[\033[0;90m\]"       # Black
IRed="\[\033[0;91m\]"         # Red
IGreen="\[\033[0;92m\]"       # Green
IYellow="\[\033[0;93m\]"      # Yellow
IBlue="\[\033[0;94m\]"        # Blue
IPurple="\[\033[0;95m\]"      # Purple
ICyan="\[\033[0;96m\]"        # Cyan
IWhite="\[\033[0;97m\]"       # White

# Bold High Intensty
BIBlack="\[\033[1;90m\]"      # Black
BIRed="\[\033[1;91m\]"        # Red
BIGreen="\[\033[1;92m\]"      # Green
BIYellow="\[\033[1;93m\]"     # Yellow
BIBlue="\[\033[1;94m\]"       # Blue
BIPurple="\[\033[1;95m\]"     # Purple
BICyan="\[\033[1;96m\]"       # Cyan
BIWhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
On_IBlack="\[\033[0;100m\]"   # Black
On_IRed="\[\033[0;101m\]"     # Red
On_IGreen="\[\033[0;102m\]"   # Green
On_IYellow="\[\033[0;103m\]"  # Yellow
On_IBlue="\[\033[0;104m\]"    # Blue
On_IPurple="\[\033[10;95m\]"  # Purple
On_ICyan="\[\033[0;106m\]"    # Cyan
On_IWhite="\[\033[0;107m\]"   # White
------------------------------Venv-------------------------------
Venv genel olarak python sürümlerinin karışması ve sürüm değiştirildiğinde yapılması gerek pip install gibi komutların kolaylığını sağlamaktadır.
cmd üzerinden çalışmaktadır.
python -m venv .                       Olduğun konumda venv oluşturur.
kütüphane klasörünün içinde mevcut pip'ler bulunur.
pip freeze                             Mevcut yüklü pipleri gösterir.
python==3.7                            Python'un 3.7 Sürümünü yükler.
.\env\Scripts\activate                 env içine girer.
----------------------Control Komut Listesi----------------------
ctrl+a                                 Tümünü seç
ctrl+z                                 Geri al
ctrl+v                                 Yapıştır
ctrl+c                                 Kopyala / Terminalde görevi sonlandırma.
ctrl+y                                 Son işlemi yenile
ctrl+x                                 Seçili nesneyi kes/taşı
ctrl+w                                 Alt+f4 görevi görür. Açık pencereyi kapatır.
ctrl+g                                 Konuma git.(7.satır yada 15.satır gibi.)
ctrl+f                                 Sayfada bul.
ctrl+e                                 Dosyayı bul.
ctrl+s                                 Kaydet.
ctrl+shift+s                           Farklı kaydet.                     
------------------------Cmd Komutları-----------------------------
cd C:\Users\....                       Cmd üzerinden dosya değiştirir. Açılacak dosyayı seçer.
ls                                     Dosyanın içeriğini listeler.(Powershell ve Linux için.)
dir                                    Cmd üzerinden dosyayı listeler.
clear                                  Terminali temizler.